[EXEC]
calc_ptl_prop_enable=True
train_xgboost_enable=True
test_xgboost_enable=False

[PATHS]
path_to_MLOIS: /home/zvladimi/MLOIS/
path_to_pickle: /home/zvladimi/MLOIS/pickle_data/
path_to_calc_info: /home/zvladimi/MLOIS/calculated_info/
path_to_xgboost: /home/zvladimi/MLOIS/xgboost_results/
path_to_pygadgetreader: /home/zvladimi/MLOIS/.pygadgetreader/
path_to_sparta: /home/zvladimi/MLOIS/.sparta_dev/analysis/
path_to_snaps: /home/zvladimi/MLOIS/particle_data/
path_to_SPARTA_data: /home/zvladimi/MLOIS/SPARTA_data/

[MISC]
curr_sparta_file:cbol_l0063_n0256_10r200m
# how are the snapshots formatted with regards to their number of 0s 
snap_format={:04d}
random_seed=11
on_zaratan=False

[SEARCH]
# RESET LEVELS for calc_ptl_props.py (no impact on train_xgboost.py)
# 0: no reset will just run from the beginning or continue from where the last run left off
# 1: Removes the calculated information (ptl_info and halo_info) and redoes all the calculations
# 2: Same as 1 and removes the the particle trees and the number of particles per halo
# 3: Same as 2 and removes all pickled data about the halos and particles from SPARTA/the simulation
reset = 1

# Only want one snapshot?
prim_only=False
# How many dynamical times should the snapshots be separated
t_dyn_step=2
# Will find the closest redshift to what is inputted so no need for an exact number
p_red_shift=-0.07
# In R200m search for particles around halo centers
search_rad=10 
total_num_snaps=193
# What fraction of halos used in each split of the search in calc_ptl_props.py 
per_n_halo_per_split=.25
# How many things are being saved about the particles
# If for calc_ptl_props 7: halo_first, halo_n, HPIDS, Orbit/Infall, Radius, Rad Vel, Tang Vel, 
# If for morb_cat 6: Halo_ID, Halo_pos, Halo_vel, M_orb, M200m, R200m
num_save_ptl_params=7
# save size for each pd dataframe that is saved to HDF5 File
# The corresponding HDF5 will likely be a bit bigger depending on the size of the PD df
hdf5_mem_size = 1.5e9
# Chunksize for multiprocessing
chunk_size=250

[DATASET]
# Should be full name of the simulation calculated info folder
# THE ORDER OF SIMULATIONS MATTERS FOR REFERENCING HALOS
# determines what model is trained in train_xgboost.py and what model performs the preds in test_xgboost.py
model_sims:["cbol_l0063_n0256_10r200m_190to166"] 
test_halos_ratio=0.25

[XGBOOST]
# only used in test_xgboost.py
test_sims:["cbol_l0063_n0256_10r200m_190to166"] 
# Name is important as that is how separate models for the same dataset can be referenced
model_type:base
# Options are "full", "train", "test". Can be any combination of the three
# This is used in reference to model_sims' dataset in train_xgboost.py and test_sims' dataset in test_xgboost.py
eval_datasets:["test"]
nu_splits=0-10
# Mark as TRUE even if the hpo model has already been trained
hpo=False
# the radius that the training dataset will be created up to
# the testing dataset will use all data
training_rad=5
rad_splits=0 # not currently implemented
frac_train_data=1

